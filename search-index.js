var N = null;var searchIndex = {};
searchIndex["sm"]={"doc":"Using this library, you declaratively define your state machines as as set of states, connected via transitions, triggered by events. You can query the current state of the machine, or pattern match against all possible machine variants.","items":[[3,"NoneEvent","sm","NoneEvent is a semi-private event struct that is used to allow the `Initializer` trait implementations to provide a simple API to initialise a new machine.",N,N],[8,"State","","State is a custom [marker trait][m] that allows [unit-like structs][u] to be used as states in a state machine.",N,N],[8,"InitialState","","InitialState is a custom [marker trait][m] that allows a state to be used as the initial state in a state machine. This trait is a superset of the `State` trait.",N,N],[8,"Event","","Event is a custom [marker trait][m] that allows [unit-like structs][u] to be used as states in a state machine.",N,N],[8,"Machine","","Machine provides the method required to query a state machine for its current state.",N,N],[16,"State","","State represents the current (static) state of the state machine.",0,N],[16,"Event","","Event represents the (optional) event that resulted in the current state of the machine.",0,N],[10,"state","","state allows you to query the current state of the state machine.",0,N],[10,"trigger","","trigger allows you to query the event that triggered the current state of the machine.",0,[[["self"]],["option"]]],[8,"Initializer","","Initializer defines the `new` method on a machine, that accepts any state marked as `InitialState`, and returns a new machine.",N,N],[16,"Machine","","Machine represents the machine which the implemented initialiser should return.",1,N],[10,"new","","new initialises a new machine, based on the provided `InitialState` as input.",1,N],[8,"Transition","","Transition provides the method required to transition from one state to another.",N,N],[16,"Machine","","Machine represents the machine on which the implemented transformation should execute.",2,N],[10,"transition","","transition consumes the state machine and returns a new machine in the correct state, based on the passed in event.",2,N],[8,"AsEnum","","AsEnum provides the method to convert a state machine instance to an enum type.",N,N],[16,"Enum","","Enum is an enum that represents the current state machine as an enum variant.",3,N],[10,"as_enum","","as_enum consumes the state machine and returns a new enum variant that represents the consumed state machine.",3,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["noneevent"]],["bool"]]],[11,"clone","","",4,[[["self"]],["noneevent"]]]],"paths":[[8,"Machine"],[8,"Initializer"],[8,"Transition"],[8,"AsEnum"],[3,"NoneEvent"]]};
searchIndex["sm_macro"]={"doc":"This is a support crate that contains the function-like procedural macro to build state machines using the [sm] crate. All documentation lives in that crate.","items":[[14,"sm","sm_macro","Generate the declaratively described state machine diagram.",N,N]],"paths":[]};
initSearch(searchIndex);
